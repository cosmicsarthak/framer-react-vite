// Generated by Framer (6b748fa)
import { jsx as _jsx } from "react/jsx-runtime";
import {
  addFonts,
  addPropertyControls,
  ControlType,
  cx,
  RichText,
  useComponentViewport,
  useLocaleInfo,
  useVariantState,
  withCSS,
} from "../framer_scripts/framer.K3G2LCX5.mjs";
import { LayoutGroup, motion, MotionConfigContext } from "framer-motion";
import * as React from "react";
const cycleOrder = ["p_6pEW1ir"];
const serializationHash = "framer-mQxlI";
const variantClassNames = { p_6pEW1ir: "framer-v-nchxj1" };
function addPropertyOverrides(overrides, ...variants) {
  const nextOverrides = {};
  variants === null || variants === void 0
    ? void 0
    : variants.forEach(
        (variant) =>
          variant && Object.assign(nextOverrides, overrides[variant]),
      );
  return nextOverrides;
}
const transition1 = {
  damping: 60,
  delay: 0,
  mass: 1,
  stiffness: 500,
  type: "spring",
};
const Transition = ({ value, children }) => {
  const config = React.useContext(MotionConfigContext);
  const transition =
    value !== null && value !== void 0 ? value : config.transition;
  const contextValue = React.useMemo(
    () => ({ ...config, transition }),
    [JSON.stringify(transition)],
  );
  return /*#__PURE__*/ _jsx(MotionConfigContext.Provider, {
    value: contextValue,
    children: children,
  });
};
const Variants = motion(React.Fragment);
const getProps = ({ height, id, text, width, ...props }) => {
  var _ref;
  return {
    ...props,
    rLEYIFRSY:
      (_ref = text !== null && text !== void 0 ? text : props.rLEYIFRSY) !==
        null && _ref !== void 0
        ? _ref
        : "Hover Text",
  };
};
const createLayoutDependency = (props, variants) => {
  if (props.layoutDependency)
    return variants.join("-") + props.layoutDependency;
  return variants.join("-");
};
const Component = /*#__PURE__*/ React.forwardRef(function (props, ref) {
  const { activeLocale, setLocale } = useLocaleInfo();
  const { style, className, layoutId, variant, rLEYIFRSY, ...restProps } =
    getProps(props);
  const {
    baseVariant,
    classNames,
    clearLoadingGesture,
    gestureHandlers,
    gestureVariant,
    isLoading,
    setGestureState,
    setVariant,
    variants,
  } = useVariantState({
    cycleOrder,
    defaultVariant: "p_6pEW1ir",
    variant,
    variantClassNames,
  });
  const layoutDependency = createLayoutDependency(props, variants);
  const ref1 = React.useRef(null);
  const defaultLayoutId = React.useId();
  const sharedStyleClassNames = [];
  const componentViewport = useComponentViewport();
  return /*#__PURE__*/ _jsx(LayoutGroup, {
    id: layoutId !== null && layoutId !== void 0 ? layoutId : defaultLayoutId,
    children: /*#__PURE__*/ _jsx(Variants, {
      animate: variants,
      initial: false,
      children: /*#__PURE__*/ _jsx(Transition, {
        value: transition1,
        children: /*#__PURE__*/ _jsx(motion.div, {
          ...restProps,
          ...gestureHandlers,
          className: cx(
            serializationHash,
            ...sharedStyleClassNames,
            "framer-nchxj1",
            className,
            classNames,
          ),
          "data-framer-name": "Desktop",
          layoutDependency: layoutDependency,
          layoutId: "p_6pEW1ir",
          ref: ref !== null && ref !== void 0 ? ref : ref1,
          style: { ...style },
          children: /*#__PURE__*/ _jsx(RichText, {
            __fromCanvasComponent: true,
            children: /*#__PURE__*/ _jsx(React.Fragment, {
              children: /*#__PURE__*/ _jsx(motion.p, {
                style: {
                  "--font-selector": "RlM7U2F0b3NoaS1tZWRpdW0=",
                  "--framer-font-family": '"Satoshi", sans-serif',
                  "--framer-font-weight": "500",
                  "--framer-text-color":
                    "var(--extracted-r6o4lv, var(--token-cb5833a4-e810-427d-93f0-14fa8b4ce0f8, rgba(0, 0, 0, 0.5)))",
                },
                children: "Hover Text",
              }),
            }),
            className: "framer-1mr2f3h",
            fonts: ["FS;Satoshi-medium"],
            layoutDependency: layoutDependency,
            layoutId: "FQc9XXYhe",
            style: {
              "--extracted-r6o4lv":
                "var(--token-cb5833a4-e810-427d-93f0-14fa8b4ce0f8, rgba(0, 0, 0, 0.5))",
              "--framer-link-text-color": "rgb(0, 153, 255)",
              "--framer-link-text-decoration": "underline",
            },
            text: rLEYIFRSY,
            verticalAlignment: "top",
            withExternalLayout: true,
          }),
        }),
      }),
    }),
  });
});
const css = [
  "@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }",
  ".framer-mQxlI.framer-1nctyp9, .framer-mQxlI .framer-1nctyp9 { display: block; }",
  ".framer-mQxlI.framer-nchxj1 { align-content: center; align-items: center; display: flex; flex-direction: row; flex-wrap: nowrap; gap: 10px; height: min-content; justify-content: center; overflow: hidden; padding: 0px; position: relative; width: min-content; }",
  ".framer-mQxlI .framer-1mr2f3h { flex: none; height: auto; position: relative; white-space: pre; width: auto; }",
  "@supports (background: -webkit-named-image(i)) and (not (font-palette:dark)) { .framer-mQxlI.framer-nchxj1 { gap: 0px; } .framer-mQxlI.framer-nchxj1 > * { margin: 0px; margin-left: calc(10px / 2); margin-right: calc(10px / 2); } .framer-mQxlI.framer-nchxj1 > :first-child { margin-left: 0px; } .framer-mQxlI.framer-nchxj1 > :last-child { margin-right: 0px; } }",
];
/**
 * This is a generated Framer component.
 * @framerIntrinsicHeight 19
 * @framerIntrinsicWidth 76
 * @framerCanvasComponentVariantDetails {"propertyName":"variant","data":{"default":{"layout":["auto","auto"]}}}
 * @framerVariables {"rLEYIFRSY":"text"}
 * @framerImmutableVariables true
 * @framerDisplayContentsDiv false
 * @framerComponentViewportWidth true
 */ const Framerxbqo4dS4M = withCSS(Component, css, "framer-mQxlI");
export default Framerxbqo4dS4M;
Framerxbqo4dS4M.displayName = "Utilities/ScrollHoverText";
Framerxbqo4dS4M.defaultProps = { height: 19, width: 76 };
addPropertyControls(Framerxbqo4dS4M, {
  rLEYIFRSY: {
    defaultValue: "Hover Text",
    displayTextArea: false,
    title: "text",
    type: ControlType.String,
  },
});
addFonts(
  Framerxbqo4dS4M,
  [
    {
      explicitInter: true,
      fonts: [
        {
          family: "Satoshi",
          source: "fontshare",
          style: "normal",
          url: "https://framerusercontent.com/third-party-assets/fontshare/wf/P2LQKHE6KA6ZP4AAGN72KDWMHH6ZH3TA/ZC32TK2P7FPS5GFTL46EU6KQJA24ZYDB/7AHDUZ4A7LFLVFUIFSARGIWCRQJHISQP.woff2",
          weight: "500",
        },
      ],
    },
  ],
  { supportsExplicitInterCodegen: true },
);
export const __FramerMetadata__ = {
  exports: {
    default: {
      type: "reactComponent",
      name: "Framerxbqo4dS4M",
      slots: [],
      annotations: {
        framerContractVersion: "1",
        framerDisplayContentsDiv: "false",
        framerIntrinsicWidth: "76",
        framerImmutableVariables: "true",
        framerIntrinsicHeight: "19",
        framerCanvasComponentVariantDetails:
          '{"propertyName":"variant","data":{"default":{"layout":["auto","auto"]}}}',
        framerComponentViewportWidth: "true",
        framerVariables: '{"rLEYIFRSY":"text"}',
      },
    },
    Props: { type: "tsType", annotations: { framerContractVersion: "1" } },
    __FramerMetadata__: { type: "variable" },
  },
};
//# sourceMappingURL=./xbqo4dS4M.map
