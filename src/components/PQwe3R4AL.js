// Generated by Framer (570b8b5)
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import {
  addFonts,
  addPropertyControls,
  ControlType,
  cx,
  getFonts,
  useActiveVariantCallback,
  useLocaleInfo,
  useVariantState,
  withCSS,
  withMappedReactProps,
} from "../framer_scripts/framer.K3G2LCX5.mjs";
import { LayoutGroup, motion, MotionConfigContext } from "framer-motion";
import * as React from "react";
import {
  Language_ToChn,
  Language_ToEn,
} from "https://framerusercontent.com/modules/yue1wEIuxL5Wxj17VKpu/rvoe6u8OOiWRrmZZxev9/Toggle.js";
import ButtonEn, * as ButtonEnInfo from "https://framerusercontent.com/modules/0XP1GcGGk1Eycv1xq2f8/nDo0xm4PFIk0ViyoVTZN/Bq2Ac4EKY.js";
import ButtonChn, * as ButtonChnInfo from "https://framerusercontent.com/modules/9frHhBnuNPkMYrEckRgu/YIPja9PeSxQVdVwIpQQf/gG6yuTG7K.js";
import * as localizedValues from "./PQwe3R4AL-0.js";
const ButtonEnFonts = getFonts(ButtonEn);
const ButtonEnLanguage_ToEnWithMappedReactProps17xyafj = withMappedReactProps(
  Language_ToEn(ButtonEn),
  ButtonEnInfo,
);
const ButtonChnFonts = getFonts(ButtonChn);
const ButtonChnLanguage_ToChnWithMappedReactProps1txx3e2 = withMappedReactProps(
  Language_ToChn(ButtonChn),
  ButtonChnInfo,
);
const enabledGestures = {
  ga7hYCsOt: { hover: true },
  TqwEABpNd: { pressed: true },
};
const cycleOrder = ["TqwEABpNd", "ga7hYCsOt"];
const serializationHash = "framer-baBzy";
const variantClassNames = {
  ga7hYCsOt: "framer-v-1dgfksk",
  TqwEABpNd: "framer-v-1stm5l9",
};
function addPropertyOverrides(overrides, ...variants) {
  const nextOverrides = {};
  variants === null || variants === void 0
    ? void 0
    : variants.forEach(
        (variant) =>
          variant && Object.assign(nextOverrides, overrides[variant]),
      );
  return nextOverrides;
}
const transitions = {
  default: { damping: 60, delay: 0, mass: 1, stiffness: 500, type: "spring" },
};
const valuesByLocaleId = { YzTqEHveH: localizedValues };
const getLocalizedValue = (key, locale) => {
  while (locale) {
    const values = valuesByLocaleId[locale.id];
    if (values) {
      const value = values[key];
      if (value) {
        return value;
      }
    }
    locale = locale.fallback;
  }
};
const Transition = ({ value, children }) => {
  const config = React.useContext(MotionConfigContext);
  const transition =
    value !== null && value !== void 0 ? value : config.transition;
  const contextValue = React.useMemo(
    () => ({ ...config, transition }),
    [JSON.stringify(transition)],
  );
  return /*#__PURE__*/ _jsx(MotionConfigContext.Provider, {
    value: contextValue,
    children: children,
  });
};
const humanReadableVariantMap = { Chn: "ga7hYCsOt", En: "TqwEABpNd" };
const getProps = ({ height, id, width, ...props }) => {
  var _humanReadableVariantMap_props_variant, _ref;
  return {
    ...props,
    variant:
      (_ref =
        (_humanReadableVariantMap_props_variant =
          humanReadableVariantMap[props.variant]) !== null &&
        _humanReadableVariantMap_props_variant !== void 0
          ? _humanReadableVariantMap_props_variant
          : props.variant) !== null && _ref !== void 0
        ? _ref
        : "TqwEABpNd",
  };
};
const createLayoutDependency = (props, variants) =>
  variants.join("-") + props.layoutDependency;
const Component = /*#__PURE__*/ React.forwardRef(function (props, ref) {
  const { activeLocale, setLocale } = useLocaleInfo();
  const { style, className, layoutId, variant, ...restProps } = getProps(props);
  const {
    baseVariant,
    classNames,
    gestureVariant,
    setGestureState,
    setVariant,
    transition,
    variants,
  } = useVariantState({
    cycleOrder,
    defaultVariant: "TqwEABpNd",
    enabledGestures,
    transitions,
    variant,
    variantClassNames,
  });
  const layoutDependency = createLayoutDependency(props, variants);
  const { activeVariantCallback, delay } =
    useActiveVariantCallback(baseVariant);
  const bC9GUQM7Wx7g8w5 = activeVariantCallback(async (...args) => {
    setVariant("TqwEABpNd");
  });
  const jKPG0MM0sv8np4n = activeVariantCallback(async (...args) => {
    setVariant("ga7hYCsOt");
  });
  const ref1 = React.useRef(null);
  const defaultLayoutId = React.useId();
  const sharedStyleClassNames = [];
  return /*#__PURE__*/ _jsx(LayoutGroup, {
    id: layoutId !== null && layoutId !== void 0 ? layoutId : defaultLayoutId,
    children: /*#__PURE__*/ _jsx(Transition, {
      value: transition,
      children: /*#__PURE__*/ _jsxs(motion.div, {
        ...restProps,
        animate: variants,
        className: cx(
          serializationHash,
          ...sharedStyleClassNames,
          "framer-1stm5l9",
          className,
          classNames,
        ),
        "data-framer-name": "En",
        initial: variant,
        layoutDependency: layoutDependency,
        layoutId: "TqwEABpNd",
        onHoverEnd: () => setGestureState({ isHovered: false }),
        onHoverStart: () => setGestureState({ isHovered: true }),
        onTap: () => setGestureState({ isPressed: false }),
        onTapCancel: () => setGestureState({ isPressed: false }),
        onTapStart: () => setGestureState({ isPressed: true }),
        ref: ref !== null && ref !== void 0 ? ref : ref1,
        style: {
          backgroundColor:
            "var(--token-f940326c-dd8d-431e-94df-2f567f90411e, rgba(0, 0, 0, 0.05))",
          borderBottomLeftRadius: 42,
          borderBottomRightRadius: 42,
          borderTopLeftRadius: 42,
          borderTopRightRadius: 42,
          ...style,
        },
        variants: {
          "ga7hYCsOt-hover": {
            backgroundColor:
              "var(--token-b030a63b-659f-4465-829f-246a02e259cb, rgba(0, 0, 0, 0.1))",
          },
          "TqwEABpNd-pressed": {
            backgroundColor:
              "var(--token-b030a63b-659f-4465-829f-246a02e259cb, rgba(0, 0, 0, 0.1))",
          },
        },
        ...addPropertyOverrides(
          {
            "ga7hYCsOt-hover": { "data-framer-name": undefined },
            "TqwEABpNd-pressed": { "data-framer-name": undefined },
            ga7hYCsOt: { "data-framer-name": "Chn" },
          },
          baseVariant,
          gestureVariant,
        ),
        children: [
          /*#__PURE__*/ _jsx(motion.div, {
            className: "framer-mv81pp",
            layoutDependency: layoutDependency,
            layoutId: "InDkpe0Bo",
            style: {
              backgroundColor:
                "var(--token-c2d1fabf-b433-4a44-8215-ec448220e490, rgb(255, 255, 255))",
              borderBottomLeftRadius: 21,
              borderBottomRightRadius: 21,
              borderTopLeftRadius: 21,
              borderTopRightRadius: 21,
            },
          }),
          /*#__PURE__*/ _jsx(motion.div, {
            className: "framer-1f3dcm6-container",
            layoutDependency: layoutDependency,
            layoutId: "KA0rIVtmc-container",
            style: { opacity: 1 },
            variants: { ga7hYCsOt: { opacity: 0.3 } },
            children: /*#__PURE__*/ _jsx(
              ButtonEnLanguage_ToEnWithMappedReactProps17xyafj,
              {
                bC9GUQM7W: bC9GUQM7Wx7g8w5,
                height: "100%",
                id: "KA0rIVtmc",
                layoutId: "KA0rIVtmc",
                style: { height: "100%", width: "100%" },
                width: "100%",
              },
            ),
          }),
          /*#__PURE__*/ _jsx(motion.div, {
            className: "framer-mocj15-container",
            layoutDependency: layoutDependency,
            layoutId: "o2qJ79ixs-container",
            style: { opacity: 0.3 },
            variants: {
              "ga7hYCsOt-hover": { opacity: 1 },
              ga7hYCsOt: { opacity: 1 },
            },
            children: /*#__PURE__*/ _jsx(
              ButtonChnLanguage_ToChnWithMappedReactProps1txx3e2,
              {
                height: "100%",
                id: "o2qJ79ixs",
                jKPG0MM0s: jKPG0MM0sv8np4n,
                layoutId: "o2qJ79ixs",
                style: { height: "100%", width: "100%" },
                width: "100%",
              },
            ),
          }),
        ],
      }),
    }),
  });
});
const css = [
  '.framer-baBzy[data-border="true"]::after, .framer-baBzy [data-border="true"]::after { content: ""; border-width: var(--border-top-width, 0) var(--border-right-width, 0) var(--border-bottom-width, 0) var(--border-left-width, 0); border-color: var(--border-color, none); border-style: var(--border-style, none); width: 100%; height: 100%; position: absolute; box-sizing: border-box; left: 0; top: 0; border-radius: inherit; pointer-events: none; }',
  "@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }",
  ".framer-baBzy.framer-1cxkqme, .framer-baBzy .framer-1cxkqme { display: block; }",
  ".framer-baBzy.framer-1stm5l9 { align-content: center; align-items: center; cursor: pointer; display: flex; flex-direction: row; flex-wrap: nowrap; gap: 0px; height: 42px; justify-content: flex-start; overflow: hidden; padding: 0px 0px 0px 0px; position: relative; width: auto; will-change: var(--framer-will-change-override, transform); }",
  ".framer-baBzy .framer-mv81pp { bottom: 4px; flex: none; left: 4px; overflow: hidden; position: absolute; top: 4px; width: 34px; will-change: var(--framer-will-change-override, transform); z-index: 0; }",
  ".framer-baBzy .framer-1f3dcm6-container, .framer-baBzy .framer-mocj15-container { flex: none; height: 42px; position: relative; width: 42px; }",
  "@supports (background: -webkit-named-image(i)) and (not (font-palette:dark)) { .framer-baBzy.framer-1stm5l9 { gap: 0px; } .framer-baBzy.framer-1stm5l9 > * { margin: 0px; margin-left: calc(0px / 2); margin-right: calc(0px / 2); } .framer-baBzy.framer-1stm5l9 > :first-child { margin-left: 0px; } .framer-baBzy.framer-1stm5l9 > :last-child { margin-right: 0px; } }",
  ".framer-baBzy.framer-v-1dgfksk .framer-mv81pp { left: unset; right: 4px; }",
  ".framer-baBzy.framer-v-1dgfksk.hover .framer-mv81pp { left: unset; }",
];
/**
 * This is a generated Framer component.
 * @framerIntrinsicHeight 42
 * @framerIntrinsicWidth 84
 * @framerCanvasComponentVariantDetails {"propertyName":"variant","data":{"default":{"layout":["auto","fixed"]},"ga7hYCsOt":{"layout":["auto","fixed"]},"EvOuf9zjT":{"layout":["auto","fixed"]},"BoSflDHd0":{"layout":["auto","fixed"]}}}
 * @framerImmutableVariables true
 * @framerDisplayContentsDiv false
 */ const FramerPQwe3R4AL = withCSS(Component, css, "framer-baBzy");
export default FramerPQwe3R4AL;
FramerPQwe3R4AL.displayName = "Toggle/BlogLanguageSwitcher";
FramerPQwe3R4AL.defaultProps = { height: 42, width: 84 };
addPropertyControls(FramerPQwe3R4AL, {
  variant: {
    options: ["TqwEABpNd", "ga7hYCsOt"],
    optionTitles: ["En", "Chn"],
    title: "Variant",
    type: ControlType.Enum,
  },
});
addFonts(FramerPQwe3R4AL, [...ButtonEnFonts, ...ButtonChnFonts]);
export const __FramerMetadata__ = {
  exports: {
    default: {
      type: "reactComponent",
      name: "FramerPQwe3R4AL",
      slots: [],
      annotations: {
        framerIntrinsicHeight: "42",
        framerImmutableVariables: "true",
        framerCanvasComponentVariantDetails:
          '{"propertyName":"variant","data":{"default":{"layout":["auto","fixed"]},"ga7hYCsOt":{"layout":["auto","fixed"]},"EvOuf9zjT":{"layout":["auto","fixed"]},"BoSflDHd0":{"layout":["auto","fixed"]}}}',
        framerContractVersion: "1",
        framerIntrinsicWidth: "84",
        framerDisplayContentsDiv: "false",
      },
    },
    Props: { type: "tsType", annotations: { framerContractVersion: "1" } },
    __FramerMetadata__: { type: "variable" },
  },
};
