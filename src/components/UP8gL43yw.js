// Generated by Framer (9a49031)
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import {
  addFonts,
  addPropertyControls,
  ControlType,
  cx,
  getFonts,
  useLocaleInfo,
  useVariantState,
  withCSS,
} from "../framer_scripts/framer.K3G2LCX5.mjs";
import { LayoutGroup, motion, MotionConfigContext } from "framer-motion";
import * as React from "react";
import ButtonTouchPad from "https://framerusercontent.com/modules/ATh6ZfegzRqXrJCYMnFB/T3eIQ2RNWwQu8mHsqeSO/FGuSuaCxq.js";
import ButtonArrowKey from "https://framerusercontent.com/modules/MufwcWvVFhxZlkQn6h2c/HZ0JCjRcUUi3zNoANjxZ/kEXaEesTB.js";
import ButtonMouse from "https://framerusercontent.com/modules/3oCzJfAxaD45pXOnA1hM/RM0AuDYYUclB0bclAXSI/M0LJTZ34T.js";
import ButtonArrowLeft from "https://framerusercontent.com/modules/kgYPe6YXAcMYx60379sf/mCbznPOkRMP3iiz2qG9i/Q9BYQlEoa.js";
import * as localizedValues from "./UP8gL43yw-0.js";
const ButtonMouseFonts = getFonts(ButtonMouse);
const ButtonTouchPadFonts = getFonts(ButtonTouchPad);
const ButtonArrowLeftFonts = getFonts(ButtonArrowLeft);
const ButtonArrowKeyFonts = getFonts(ButtonArrowKey);
const cycleOrder = ["RVDdRvwK4", "r1qjybY2U", "wiNPp4Mhl", "X8WW8lwrn"];
const serializationHash = "framer-rwXUw";
const variantClassNames = {
  r1qjybY2U: "framer-v-1ve7pnz",
  RVDdRvwK4: "framer-v-1iv40hc",
  wiNPp4Mhl: "framer-v-8zdxu4",
  X8WW8lwrn: "framer-v-i6h8pv",
};
function addPropertyOverrides(overrides, ...variants) {
  const nextOverrides = {};
  variants === null || variants === void 0
    ? void 0
    : variants.forEach(
        (variant) =>
          variant && Object.assign(nextOverrides, overrides[variant]),
      );
  return nextOverrides;
}
const transitions = {
  default: { damping: 60, delay: 0, mass: 1, stiffness: 500, type: "spring" },
};
const valuesByLocaleId = { YzTqEHveH: localizedValues };
const getLocalizedValue = (key, locale) => {
  while (locale) {
    const values = valuesByLocaleId[locale.id];
    if (values) {
      const value = values[key];
      if (value) {
        return value;
      }
    }
    locale = locale.fallback;
  }
};
const Transition = ({ value, children }) => {
  const config = React.useContext(MotionConfigContext);
  const transition =
    value !== null && value !== void 0 ? value : config.transition;
  const contextValue = React.useMemo(
    () => ({ ...config, transition }),
    [JSON.stringify(transition)],
  );
  return /*#__PURE__*/ _jsx(MotionConfigContext.Provider, {
    value: contextValue,
    children: children,
  });
};
const humanReadableVariantMap = {
  ArrowKey: "X8WW8lwrn",
  Mouse: "RVDdRvwK4",
  Touch: "wiNPp4Mhl",
  TouchPad: "r1qjybY2U",
};
const getProps = ({ height, id, width, ...props }) => {
  var _humanReadableVariantMap_props_variant, _ref;
  return {
    ...props,
    variant:
      (_ref =
        (_humanReadableVariantMap_props_variant =
          humanReadableVariantMap[props.variant]) !== null &&
        _humanReadableVariantMap_props_variant !== void 0
          ? _humanReadableVariantMap_props_variant
          : props.variant) !== null && _ref !== void 0
        ? _ref
        : "RVDdRvwK4",
  };
};
const createLayoutDependency = (props, variants) =>
  variants.join("-") + props.layoutDependency;
const Component = /*#__PURE__*/ React.forwardRef(function (props, ref) {
  const { activeLocale } = useLocaleInfo();
  const { style, className, layoutId, variant, ...restProps } = getProps(props);
  const {
    baseVariant,
    classNames,
    gestureVariant,
    setGestureState,
    setVariant,
    transition,
    variants,
  } = useVariantState({
    cycleOrder,
    defaultVariant: "RVDdRvwK4",
    transitions,
    variant,
    variantClassNames,
  });
  const layoutDependency = createLayoutDependency(props, variants);
  const ref1 = React.useRef(null);
  const isDisplayed = () => {
    if (["r1qjybY2U", "wiNPp4Mhl", "X8WW8lwrn"].includes(baseVariant))
      return false;
    return true;
  };
  const isDisplayed1 = () => {
    if (baseVariant === "r1qjybY2U") return true;
    return false;
  };
  const isDisplayed2 = () => {
    if (baseVariant === "wiNPp4Mhl") return true;
    return false;
  };
  const isDisplayed3 = () => {
    if (baseVariant === "X8WW8lwrn") return true;
    return false;
  };
  const defaultLayoutId = React.useId();
  const sharedStyleClassNames = [];
  return /*#__PURE__*/ _jsx(LayoutGroup, {
    id: layoutId !== null && layoutId !== void 0 ? layoutId : defaultLayoutId,
    children: /*#__PURE__*/ _jsx(motion.div, {
      initial: variant,
      animate: variants,
      onHoverStart: () => setGestureState({ isHovered: true }),
      onHoverEnd: () => setGestureState({ isHovered: false }),
      onTapStart: () => setGestureState({ isPressed: true }),
      onTap: () => setGestureState({ isPressed: false }),
      onTapCancel: () => setGestureState({ isPressed: false }),
      className: cx("framer-rwXUw", ...sharedStyleClassNames, classNames),
      style: { display: "contents" },
      children: /*#__PURE__*/ _jsx(Transition, {
        value: transition,
        children: /*#__PURE__*/ _jsxs(motion.div, {
          ...restProps,
          className: cx("framer-1iv40hc", className),
          "data-framer-name": "Mouse",
          layoutDependency: layoutDependency,
          layoutId: "RVDdRvwK4",
          ref: ref !== null && ref !== void 0 ? ref : ref1,
          style: { ...style },
          ...addPropertyOverrides(
            {
              r1qjybY2U: { "data-framer-name": "TouchPad" },
              wiNPp4Mhl: { "data-framer-name": "Touch" },
              X8WW8lwrn: { "data-framer-name": "ArrowKey" },
            },
            baseVariant,
            gestureVariant,
          ),
          children: [
            isDisplayed() &&
              /*#__PURE__*/ _jsx(motion.div, {
                className: "framer-1wqyrv5-container",
                layoutDependency: layoutDependency,
                layoutId: "DIZZJudFa-container",
                children: /*#__PURE__*/ _jsx(ButtonMouse, {
                  height: "100%",
                  id: "DIZZJudFa",
                  layoutId: "DIZZJudFa",
                  style: { height: "100%", width: "100%" },
                  width: "100%",
                }),
              }),
            isDisplayed1() &&
              /*#__PURE__*/ _jsx(motion.div, {
                className: "framer-iwn23i-container",
                layoutDependency: layoutDependency,
                layoutId: "ZUohrLTSn-container",
                children: /*#__PURE__*/ _jsx(ButtonTouchPad, {
                  height: "100%",
                  id: "ZUohrLTSn",
                  layoutId: "ZUohrLTSn",
                  style: { height: "100%", width: "100%" },
                  variant: "brTi_c7ZO",
                  width: "100%",
                }),
              }),
            isDisplayed2() &&
              /*#__PURE__*/ _jsx(motion.div, {
                className: "framer-a2upln-container",
                layoutDependency: layoutDependency,
                layoutId: "EWHLXcSo4-container",
                children: /*#__PURE__*/ _jsx(ButtonArrowLeft, {
                  height: "100%",
                  id: "EWHLXcSo4",
                  layoutId: "EWHLXcSo4",
                  style: { height: "100%", width: "100%" },
                  width: "100%",
                }),
              }),
            isDisplayed3() &&
              /*#__PURE__*/ _jsx(motion.div, {
                className: "framer-mi6792-container",
                layoutDependency: layoutDependency,
                layoutId: "jliYFCfr4-container",
                children: /*#__PURE__*/ _jsx(ButtonArrowKey, {
                  height: "100%",
                  id: "jliYFCfr4",
                  layoutId: "jliYFCfr4",
                  style: { height: "100%", width: "100%" },
                  width: "100%",
                }),
              }),
          ],
        }),
      }),
    }),
  });
});
const css = [
  '.framer-rwXUw [data-border="true"]::after { content: ""; border-width: var(--border-top-width, 0) var(--border-right-width, 0) var(--border-bottom-width, 0) var(--border-left-width, 0); border-color: var(--border-color, none); border-style: var(--border-style, none); width: 100%; height: 100%; position: absolute; box-sizing: border-box; left: 0; top: 0; border-radius: inherit; pointer-events: none; }',
  "@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }",
  ".framer-rwXUw .framer-1on6amf { display: block; }",
  ".framer-rwXUw .framer-1iv40hc { height: 42px; overflow: visible; position: relative; width: 42px; }",
  ".framer-rwXUw .framer-1wqyrv5-container { bottom: 0px; flex: none; left: 0px; position: absolute; top: 0px; width: 42px; }",
  ".framer-rwXUw .framer-iwn23i-container { bottom: 0px; flex: none; position: absolute; right: 0px; top: 0px; width: 42px; }",
  ".framer-rwXUw .framer-a2upln-container { bottom: 0px; flex: none; left: 0px; position: absolute; right: 0px; top: 0px; }",
  ".framer-rwXUw .framer-mi6792-container { flex: none; height: 42px; left: 0px; position: absolute; top: 0px; width: 42px; }",
  ".framer-rwXUw.framer-v-8zdxu4 .framer-1iv40hc { height: 24px; width: 24px; }",
];
/**
 * This is a generated Framer component.
 * @framerIntrinsicHeight 42
 * @framerIntrinsicWidth 42
 * @framerCanvasComponentVariantDetails {"propertyName":"variant","data":{"default":{"layout":["fixed","fixed"]},"r1qjybY2U":{"layout":["fixed","fixed"]},"wiNPp4Mhl":{"layout":["fixed","fixed"]},"X8WW8lwrn":{"layout":["fixed","fixed"]}}}
 * @framerImmutableVariables true
 */ const FramerUP8gL43yw = withCSS(Component, css, "framer-rwXUw");
export default FramerUP8gL43yw;
FramerUP8gL43yw.displayName = "Utilities/ScrollTip";
FramerUP8gL43yw.defaultProps = { height: 42, width: 42 };
addPropertyControls(FramerUP8gL43yw, {
  variant: {
    options: ["RVDdRvwK4", "r1qjybY2U", "wiNPp4Mhl", "X8WW8lwrn"],
    optionTitles: ["Mouse", "TouchPad", "Touch", "ArrowKey"],
    title: "Variant",
    type: ControlType.Enum,
  },
});
addFonts(FramerUP8gL43yw, [
  ...ButtonMouseFonts,
  ...ButtonTouchPadFonts,
  ...ButtonArrowLeftFonts,
  ...ButtonArrowKeyFonts,
]);
export const __FramerMetadata__ = {
  exports: {
    Props: { type: "tsType", annotations: { framerContractVersion: "1" } },
    default: {
      type: "reactComponent",
      name: "FramerUP8gL43yw",
      slots: [],
      annotations: {
        framerIntrinsicWidth: "42",
        framerImmutableVariables: "true",
        framerContractVersion: "1",
        framerIntrinsicHeight: "42",
        framerCanvasComponentVariantDetails:
          '{"propertyName":"variant","data":{"default":{"layout":["fixed","fixed"]},"r1qjybY2U":{"layout":["fixed","fixed"]},"wiNPp4Mhl":{"layout":["fixed","fixed"]},"X8WW8lwrn":{"layout":["fixed","fixed"]}}}',
      },
    },
    __FramerMetadata__: { type: "variable" },
  },
};
